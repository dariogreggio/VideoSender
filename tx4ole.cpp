// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "tx4ole.h"

/////////////////////////////////////////////////////////////////////////////
// CTX4OLE

IMPLEMENT_DYNCREATE(CTX4OLE, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CTX4OLE properties

BOOL CTX4OLE::GetEnabled()
{
	BOOL result;
	GetProperty(DISPID_ENABLED, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetEnabled(BOOL propVal)
{
	SetProperty(DISPID_ENABLED, VT_BOOL, propVal);
}

OLE_COLOR CTX4OLE::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

OLE_COLOR CTX4OLE::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_HANDLE CTX4OLE::GetHWnd()
{
	OLE_HANDLE result;
	GetProperty(DISPID_HWND, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetHWnd(OLE_HANDLE propVal)
{
	SetProperty(DISPID_HWND, VT_I4, propVal);
}

BOOL CTX4OLE::GetTabKey()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTabKey(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetFormatSelection()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetFormatSelection(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

CString CTX4OLE::GetVTSpellDictionary()
{
	CString result;
	GetProperty(0x3, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetVTSpellDictionary(LPCTSTR propVal)
{
	SetProperty(0x3, VT_BSTR, propVal);
}

short CTX4OLE::GetBorderStyle()
{
	short result;
	GetProperty(0x4, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetBorderStyle(short propVal)
{
	SetProperty(0x4, VT_I2, propVal);
}

short CTX4OLE::GetBackStyle()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetBackStyle(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}

short CTX4OLE::GetFontBold()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontBold(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CTX4OLE::GetFontItalic()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontItalic(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

CString CTX4OLE::GetFontName()
{
	CString result;
	GetProperty(0x8, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetFontName(LPCTSTR propVal)
{
	SetProperty(0x8, VT_BSTR, propVal);
}

short CTX4OLE::GetFontSize()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontSize(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

short CTX4OLE::GetFontStrikethru()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontStrikethru(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}

short CTX4OLE::GetFontUnderline()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontUnderline(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}

long CTX4OLE::GetPageWidth()
{
	long result;
	GetProperty(0xc, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageWidth(long propVal)
{
	SetProperty(0xc, VT_I4, propVal);
}

long CTX4OLE::GetPageHeight()
{
	long result;
	GetProperty(0xd, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageHeight(long propVal)
{
	SetProperty(0xd, VT_I4, propVal);
}

short CTX4OLE::GetScrollBars()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetScrollBars(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}

CString CTX4OLE::GetText()
{
	CString result;
	GetProperty(0xf, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetText(LPCTSTR propVal)
{
	SetProperty(0xf, VT_BSTR, propVal);
}

short CTX4OLE::GetAlignment()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetAlignment(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}

short CTX4OLE::GetFrameDistance()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFrameDistance(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}

short CTX4OLE::GetFrameLineWidth()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFrameLineWidth(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}

short CTX4OLE::GetFrameStyle()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFrameStyle(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}

long CTX4OLE::GetScrollPosX()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetScrollPosX(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}

long CTX4OLE::GetScrollPosY()
{
	long result;
	GetProperty(0x15, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetScrollPosY(long propVal)
{
	SetProperty(0x15, VT_I4, propVal);
}

long CTX4OLE::GetPageMarginL()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageMarginL(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}

long CTX4OLE::GetPageMarginT()
{
	long result;
	GetProperty(0x17, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageMarginT(long propVal)
{
	SetProperty(0x17, VT_I4, propVal);
}

long CTX4OLE::GetPageMarginR()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageMarginR(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}

long CTX4OLE::GetPageMarginB()
{
	long result;
	GetProperty(0x19, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPageMarginB(long propVal)
{
	SetProperty(0x19, VT_I4, propVal);
}

long CTX4OLE::GetPrintDevice()
{
	long result;
	GetProperty(0x1a, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetPrintDevice(long propVal)
{
	SetProperty(0x1a, VT_I4, propVal);
}

BOOL CTX4OLE::GetControlChars()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetControlChars(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetHideSelection()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetHideSelection(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetInsertionMode()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetInsertionMode(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}

long CTX4OLE::GetSelLength()
{
	long result;
	GetProperty(0x1e, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetSelLength(long propVal)
{
	SetProperty(0x1e, VT_I4, propVal);
}

long CTX4OLE::GetSelStart()
{
	long result;
	GetProperty(0x1f, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetSelStart(long propVal)
{
	SetProperty(0x1f, VT_I4, propVal);
}

CString CTX4OLE::GetSelText()
{
	CString result;
	GetProperty(0x20, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetSelText(LPCTSTR propVal)
{
	SetProperty(0x20, VT_BSTR, propVal);
}

BOOL CTX4OLE::GetClipChildren()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetClipChildren(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetClipSiblings()
{
	BOOL result;
	GetProperty(0x22, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetClipSiblings(BOOL propVal)
{
	SetProperty(0x22, VT_BOOL, propVal);
}

short CTX4OLE::GetSizeMode()
{
	short result;
	GetProperty(0x23, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetSizeMode(short propVal)
{
	SetProperty(0x23, VT_I2, propVal);
}

short CTX4OLE::GetLanguage()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetLanguage(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}

short CTX4OLE::GetViewMode()
{
	short result;
	GetProperty(0x25, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetViewMode(short propVal)
{
	SetProperty(0x25, VT_I2, propVal);
}

BOOL CTX4OLE::GetPrintOffset()
{
	BOOL result;
	GetProperty(0x26, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetPrintOffset(BOOL propVal)
{
	SetProperty(0x26, VT_BOOL, propVal);
}

short CTX4OLE::GetZoomFactor()
{
	short result;
	GetProperty(0x27, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetZoomFactor(short propVal)
{
	SetProperty(0x27, VT_I2, propVal);
}

short CTX4OLE::GetFieldCurrent()
{
	short result;
	GetProperty(0x28, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldCurrent(short propVal)
{
	SetProperty(0x28, VT_I2, propVal);
}

BOOL CTX4OLE::GetFieldChangeable()
{
	BOOL result;
	GetProperty(0x29, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldChangeable(BOOL propVal)
{
	SetProperty(0x29, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetFieldDeleteable()
{
	BOOL result;
	GetProperty(0x2a, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldDeleteable(BOOL propVal)
{
	SetProperty(0x2a, VT_BOOL, propVal);
}

CString CTX4OLE::GetFieldText()
{
	CString result;
	GetProperty(0x2b, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldText(LPCTSTR propVal)
{
	SetProperty(0x2b, VT_BSTR, propVal);
}

short CTX4OLE::GetTabCurrent()
{
	short result;
	GetProperty(0x2c, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetTabCurrent(short propVal)
{
	SetProperty(0x2c, VT_I2, propVal);
}

short CTX4OLE::GetTabType()
{
	short result;
	GetProperty(0x2d, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetTabType(short propVal)
{
	SetProperty(0x2d, VT_I2, propVal);
}

long CTX4OLE::GetTabPos()
{
	long result;
	GetProperty(0x2e, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetTabPos(long propVal)
{
	SetProperty(0x2e, VT_I4, propVal);
}

short CTX4OLE::GetBaseLine()
{
	short result;
	GetProperty(0x2f, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetBaseLine(short propVal)
{
	SetProperty(0x2f, VT_I2, propVal);
}

short CTX4OLE::GetLineSpacing()
{
	short result;
	GetProperty(0x30, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetLineSpacing(short propVal)
{
	SetProperty(0x30, VT_I2, propVal);
}

short CTX4OLE::GetPrintZoom()
{
	short result;
	GetProperty(0x31, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetPrintZoom(short propVal)
{
	SetProperty(0x31, VT_I2, propVal);
}

CString CTX4OLE::GetRTFSelText()
{
	CString result;
	GetProperty(0x32, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetRTFSelText(LPCTSTR propVal)
{
	SetProperty(0x32, VT_BSTR, propVal);
}

CString CTX4OLE::GetImageFilters()
{
	CString result;
	GetProperty(0x33, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetImageFilters(LPCTSTR propVal)
{
	SetProperty(0x33, VT_BSTR, propVal);
}

CString CTX4OLE::GetImageFilename()
{
	CString result;
	GetProperty(0x34, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetImageFilename(LPCTSTR propVal)
{
	SetProperty(0x34, VT_BSTR, propVal);
}

short CTX4OLE::GetLineSpacingT()
{
	short result;
	GetProperty(0x35, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetLineSpacingT(short propVal)
{
	SetProperty(0x35, VT_I2, propVal);
}

short CTX4OLE::GetObjectCurrent()
{
	short result;
	GetProperty(0x36, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectCurrent(short propVal)
{
	SetProperty(0x36, VT_I2, propVal);
}

long CTX4OLE::GetStatusBarHandle()
{
	long result;
	GetProperty(0x37, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetStatusBarHandle(long propVal)
{
	SetProperty(0x37, VT_I4, propVal);
}

long CTX4OLE::GetRulerHandle()
{
	long result;
	GetProperty(0x38, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetRulerHandle(long propVal)
{
	SetProperty(0x38, VT_I4, propVal);
}

long CTX4OLE::GetButtonBarHandle()
{
	long result;
	GetProperty(0x39, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetButtonBarHandle(long propVal)
{
	SetProperty(0x39, VT_I4, propVal);
}

short CTX4OLE::GetObjectScaleX()
{
	short result;
	GetProperty(0x3a, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectScaleX(short propVal)
{
	SetProperty(0x3a, VT_I2, propVal);
}

short CTX4OLE::GetObjectScaleY()
{
	short result;
	GetProperty(0x3b, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectScaleY(short propVal)
{
	SetProperty(0x3b, VT_I2, propVal);
}

short CTX4OLE::GetObjectTextflow()
{
	short result;
	GetProperty(0x3c, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectTextflow(short propVal)
{
	SetProperty(0x3c, VT_I2, propVal);
}

short CTX4OLE::GetObjectSizeMode()
{
	short result;
	GetProperty(0x3d, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectSizeMode(short propVal)
{
	SetProperty(0x3d, VT_I2, propVal);
}

short CTX4OLE::GetImageSaveMode()
{
	short result;
	GetProperty(0x3e, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetImageSaveMode(short propVal)
{
	SetProperty(0x3e, VT_I2, propVal);
}

short CTX4OLE::GetImageDisplayMode()
{
	short result;
	GetProperty(0x3f, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetImageDisplayMode(short propVal)
{
	SetProperty(0x3f, VT_I2, propVal);
}

BOOL CTX4OLE::GetPrintColors()
{
	BOOL result;
	GetProperty(0x40, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetPrintColors(BOOL propVal)
{
	SetProperty(0x40, VT_BOOL, propVal);
}

short CTX4OLE::GetEditMode()
{
	short result;
	GetProperty(0x41, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetEditMode(short propVal)
{
	SetProperty(0x41, VT_I2, propVal);
}

short CTX4OLE::GetMousePointer()
{
	short result;
	GetProperty(0x42, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetMousePointer(short propVal)
{
	SetProperty(0x42, VT_I2, propVal);
}

long CTX4OLE::GetNextWindow()
{
	long result;
	GetProperty(0x43, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetNextWindow(long propVal)
{
	SetProperty(0x43, VT_I4, propVal);
}

short CTX4OLE::GetCanUndo()
{
	short result;
	GetProperty(0x44, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetCanUndo(short propVal)
{
	SetProperty(0x44, VT_I2, propVal);
}

short CTX4OLE::GetCanRedo()
{
	short result;
	GetProperty(0x45, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetCanRedo(short propVal)
{
	SetProperty(0x45, VT_I2, propVal);
}

long CTX4OLE::GetCurrentPages()
{
	long result;
	GetProperty(0x46, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetCurrentPages(long propVal)
{
	SetProperty(0x46, VT_I4, propVal);
}

long CTX4OLE::GetFieldPosX()
{
	long result;
	GetProperty(0x47, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldPosX(long propVal)
{
	SetProperty(0x47, VT_I4, propVal);
}

long CTX4OLE::GetFieldPosY()
{
	long result;
	GetProperty(0x48, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldPosY(long propVal)
{
	SetProperty(0x48, VT_I4, propVal);
}

long CTX4OLE::GetFieldStart()
{
	long result;
	GetProperty(0x49, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldStart(long propVal)
{
	SetProperty(0x49, VT_I4, propVal);
}

long CTX4OLE::GetFieldEnd()
{
	long result;
	GetProperty(0x4a, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldEnd(long propVal)
{
	SetProperty(0x4a, VT_I4, propVal);
}

short CTX4OLE::GetIndentL()
{
	short result;
	GetProperty(0x4b, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetIndentL(short propVal)
{
	SetProperty(0x4b, VT_I2, propVal);
}

short CTX4OLE::GetIndentR()
{
	short result;
	GetProperty(0x4c, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetIndentR(short propVal)
{
	SetProperty(0x4c, VT_I2, propVal);
}

short CTX4OLE::GetIndentFL()
{
	short result;
	GetProperty(0x4d, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetIndentFL(short propVal)
{
	SetProperty(0x4d, VT_I2, propVal);
}

short CTX4OLE::GetIndentT()
{
	short result;
	GetProperty(0x4e, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetIndentT(short propVal)
{
	SetProperty(0x4e, VT_I2, propVal);
}

short CTX4OLE::GetIndentB()
{
	short result;
	GetProperty(0x4f, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetIndentB(short propVal)
{
	SetProperty(0x4f, VT_I2, propVal);
}

unsigned long CTX4OLE::GetTextBkColor()
{
	unsigned long result;
	GetProperty(0x50, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetTextBkColor(unsigned long propVal)
{
	SetProperty(0x50, VT_I4, propVal);
}

short CTX4OLE::GetDataFormat()
{
	short result;
	GetProperty(0x51, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetDataFormat(short propVal)
{
	SetProperty(0x51, VT_I2, propVal);
}

CString CTX4OLE::GetDataText()
{
	CString result;
	GetProperty(0x52, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetDataText(LPCTSTR propVal)
{
	SetProperty(0x52, VT_BSTR, propVal);
}

short CTX4OLE::GetViewSection()
{
	short result;
	GetProperty(0x69, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetViewSection(short propVal)
{
	SetProperty(0x69, VT_I2, propVal);
}

CString CTX4OLE::GetViewImagePath()
{
	CString result;
	GetProperty(0x6a, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetViewImagePath(LPCTSTR propVal)
{
	SetProperty(0x6a, VT_BSTR, propVal);
}

BOOL CTX4OLE::GetAutoExpand()
{
	BOOL result;
	GetProperty(0x6b, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetAutoExpand(BOOL propVal)
{
	SetProperty(0x6b, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableCanInsert()
{
	BOOL result;
	GetProperty(0x6e, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanInsert(BOOL propVal)
{
	SetProperty(0x6e, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableCanDeleteLines()
{
	BOOL result;
	GetProperty(0x6f, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanDeleteLines(BOOL propVal)
{
	SetProperty(0x6f, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetEnableHyperlinks()
{
	BOOL result;
	GetProperty(0x71, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetEnableHyperlinks(BOOL propVal)
{
	SetProperty(0x71, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableGridLines()
{
	BOOL result;
	GetProperty(0x73, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableGridLines(BOOL propVal)
{
	SetProperty(0x73, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableCanChangeAttr()
{
	BOOL result;
	GetProperty(0x74, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanChangeAttr(BOOL propVal)
{
	SetProperty(0x74, VT_BOOL, propVal);
}

short CTX4OLE::GetTableAtInputPos()
{
	short result;
	GetProperty(0x78, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetTableAtInputPos(short propVal)
{
	SetProperty(0x78, VT_I2, propVal);
}

short CTX4OLE::GetTableColAtInputPos()
{
	short result;
	GetProperty(0x79, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetTableColAtInputPos(short propVal)
{
	SetProperty(0x79, VT_I2, propVal);
}

short CTX4OLE::GetTableRowAtInputPos()
{
	short result;
	GetProperty(0x7a, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetTableRowAtInputPos(short propVal)
{
	SetProperty(0x7a, VT_I2, propVal);
}

short CTX4OLE::GetFontUnderlineStyle()
{
	short result;
	GetProperty(0x7b, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFontUnderlineStyle(short propVal)
{
	SetProperty(0x7b, VT_I2, propVal);
}

short CTX4OLE::GetDataTextFormat()
{
	short result;
	GetProperty(0x86, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetDataTextFormat(short propVal)
{
	SetProperty(0x86, VT_I2, propVal);
}

CString CTX4OLE::GetResourceFile()
{
	CString result;
	GetProperty(0x87, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetResourceFile(LPCTSTR propVal)
{
	SetProperty(0x87, VT_BSTR, propVal);
}

VARIANT CTX4OLE::GetCurrentInputPosition()
{
	VARIANT result;
	GetProperty(0x88, VT_VARIANT, (void*)&result);
	return result;
}

void CTX4OLE::SetCurrentInputPosition(const VARIANT& propVal)
{
	SetProperty(0x88, VT_VARIANT, &propVal);
}

long CTX4OLE::GetHeaderFooterStyle()
{
	long result;
	GetProperty(0x8b, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetHeaderFooterStyle(long propVal)
{
	SetProperty(0x8b, VT_I4, propVal);
}

long CTX4OLE::GetHeaderFooter()
{
	long result;
	GetProperty(0x8c, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetHeaderFooter(long propVal)
{
	SetProperty(0x8c, VT_I4, propVal);
}

short CTX4OLE::GetFieldAtInputPos()
{
	short result;
	GetProperty(0x91, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetFieldAtInputPos(short propVal)
{
	SetProperty(0x91, VT_I2, propVal);
}

LPDISPATCH CTX4OLE::GetObjectItem()
{
	LPDISPATCH result;
	GetProperty(0x92, VT_DISPATCH, (void*)&result);
	return result;
}

void CTX4OLE::SetObjectItem(LPDISPATCH propVal)
{
	SetProperty(0x92, VT_DISPATCH, propVal);
}

BOOL CTX4OLE::GetLockWindowUpdate()
{
	BOOL result;
	GetProperty(0x96, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetLockWindowUpdate(BOOL propVal)
{
	SetProperty(0x96, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetCanCopy()
{
	BOOL result;
	GetProperty(0x97, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetCanCopy(BOOL propVal)
{
	SetProperty(0x97, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetCanPaste()
{
	BOOL result;
	GetProperty(0x98, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetCanPaste(BOOL propVal)
{
	SetProperty(0x98, VT_BOOL, propVal);
}

long CTX4OLE::GetListType()
{
	long result;
	GetProperty(0x9b, VT_I4, (void*)&result);
	return result;
}

void CTX4OLE::SetListType(long propVal)
{
	SetProperty(0x9b, VT_I4, propVal);
}

BOOL CTX4OLE::GetTableCanDeleteColumn()
{
	BOOL result;
	GetProperty(0xa1, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanDeleteColumn(BOOL propVal)
{
	SetProperty(0xa1, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableCanInsertColumn()
{
	BOOL result;
	GetProperty(0xa2, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanInsertColumn(BOOL propVal)
{
	SetProperty(0xa2, VT_BOOL, propVal);
}

BOOL CTX4OLE::GetTableCanInsertLines()
{
	BOOL result;
	GetProperty(0xa3, VT_BOOL, (void*)&result);
	return result;
}

void CTX4OLE::SetTableCanInsertLines(BOOL propVal)
{
	SetProperty(0xa3, VT_BOOL, propVal);
}

VARIANT CTX4OLE::GetDevice()
{
	VARIANT result;
	GetProperty(0xac, VT_VARIANT, (void*)&result);
	return result;
}

void CTX4OLE::SetDevice(const VARIANT& propVal)
{
	SetProperty(0xac, VT_VARIANT, &propVal);
}

CString CTX4OLE::GetStyleCurrent()
{
	CString result;
	GetProperty(0xaf, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetStyleCurrent(LPCTSTR propVal)
{
	SetProperty(0xaf, VT_BSTR, propVal);
}

short CTX4OLE::GetWordWrapMode()
{
	short result;
	GetProperty(0xb0, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetWordWrapMode(short propVal)
{
	SetProperty(0xb0, VT_I2, propVal);
}

LPDISPATCH CTX4OLE::GetStyles()
{
	LPDISPATCH result;
	GetProperty(0xb2, VT_DISPATCH, (void*)&result);
	return result;
}

void CTX4OLE::SetStyles(LPDISPATCH propVal)
{
	SetProperty(0xb2, VT_DISPATCH, propVal);
}

short CTX4OLE::GetXMLEditMode()
{
	short result;
	GetProperty(0xb3, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetXMLEditMode(short propVal)
{
	SetProperty(0xb3, VT_I2, propVal);
}

CString CTX4OLE::GetImageExportFilters()
{
	CString result;
	GetProperty(0xb4, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetImageExportFilters(LPCTSTR propVal)
{
	SetProperty(0xb4, VT_BSTR, propVal);
}

short CTX4OLE::GetImageExportFormat()
{
	short result;
	GetProperty(0xb5, VT_I2, (void*)&result);
	return result;
}

void CTX4OLE::SetImageExportFormat(short propVal)
{
	SetProperty(0xb5, VT_I2, propVal);
}

CString CTX4OLE::GetImageExportFilename()
{
	CString result;
	GetProperty(0xb6, VT_BSTR, (void*)&result);
	return result;
}

void CTX4OLE::SetImageExportFilename(LPCTSTR propVal)
{
	SetProperty(0xb6, VT_BSTR, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CTX4OLE operations

void CTX4OLE::Refresh()
{
	InvokeHelper(DISPID_REFRESH, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CTX4OLE::PrintPage(short PageNumber)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x53, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PageNumber);
}

BOOL CTX4OLE::ParagraphDialog()
{
	BOOL result;
	InvokeHelper(0x54, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTX4OLE::FontDialog()
{
	BOOL result;
	InvokeHelper(0x55, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CTX4OLE::FindReplace(short TypeOfDialog)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x56, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 TypeOfDialog);
}

BOOL CTX4OLE::Undo()
{
	BOOL result;
	InvokeHelper(0x57, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTX4OLE::Redo()
{
	BOOL result;
	InvokeHelper(0x58, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTX4OLE::VTSpellCheck()
{
	BOOL result;
	InvokeHelper(0x59, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CTX4OLE::Clip(short Action)
{
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x5a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Action);
}

BOOL CTX4OLE::RTFImport(LPCTSTR FileName, const VARIANT& Extended)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x5b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName, &Extended);
	return result;
}

BOOL CTX4OLE::RTFExport(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CTX4OLE::TextImport(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CTX4OLE::TextExport(LPCTSTR FileName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FileName);
	return result;
}

BOOL CTX4OLE::FieldInsert(LPCTSTR FieldText)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x5f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FieldText);
	return result;
}

BOOL CTX4OLE::FieldDelete(BOOL DeleteTotal)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x60, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		DeleteTotal);
	return result;
}

short CTX4OLE::ObjectInsertAsChar(long hWnd, LPCTSTR FileName, long TextPos, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, const VARIANT& KindOfObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_VARIANT;
	InvokeHelper(0x61, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd, FileName, TextPos, ScaleX, ScaleY, ImageDisplayMode, ImageSaveMode, &KindOfObject);
	return result;
}

short CTX4OLE::ObjectInsertFixed(long hWnd, LPCTSTR FileName, long PosX, long PosY, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, short SizeMode, short Textflow, short DistanceL, short DistanceT, short DistanceR, 
		short DistanceB, const VARIANT& KindOfObject)
{
	short result;
	static BYTE parms[] =
		VTS_I4 VTS_BSTR VTS_I4 VTS_I4 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_I2 VTS_VARIANT;
	InvokeHelper(0x62, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		hWnd, FileName, PosX, PosY, ScaleX, ScaleY, ImageDisplayMode, ImageSaveMode, SizeMode, Textflow, DistanceL, DistanceT, DistanceR, DistanceB, &KindOfObject);
	return result;
}

long CTX4OLE::Load(LPCTSTR FileName, const VARIANT& Offset, const VARIANT& Format, const VARIANT& CurSelection)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x63, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		FileName, &Offset, &Format, &CurSelection);
	return result;
}

long CTX4OLE::Save(LPCTSTR FileName, const VARIANT& Offset, const VARIANT& Format, const VARIANT& CurSelection)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x64, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		FileName, &Offset, &Format, &CurSelection);
	return result;
}

BOOL CTX4OLE::ObjectDelete(short ObjectId)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x65, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		ObjectId);
	return result;
}

short CTX4OLE::ObjectNext(short ObjectId, short ObjectGroup)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x66, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		ObjectId, ObjectGroup);
	return result;
}

short CTX4OLE::GetObjectDistance(short index)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x67, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		index);
	return result;
}

void CTX4OLE::SetObjectDistance(short index, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x67, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, nNewValue);
}

BOOL CTX4OLE::ViewNextHighlight()
{
	BOOL result;
	InvokeHelper(0x68, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

short CTX4OLE::TableInsert(short Rows, short Columns, long TextPos, const VARIANT& TableId)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x6c, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		Rows, Columns, TextPos, &TableId);
	return result;
}

BOOL CTX4OLE::TableDeleteLines()
{
	BOOL result;
	InvokeHelper(0x6d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT CTX4OLE::GetLoadSaveAttribute(long Attribute)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x70, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Attribute);
	return result;
}

void CTX4OLE::SetLoadSaveAttribute(long Attribute, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x70, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Attribute, &newValue);
}

BOOL CTX4OLE::TableAttrDialog()
{
	BOOL result;
	InvokeHelper(0x72, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

short CTX4OLE::GetTableColumns(short TableId)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x75, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		TableId);
	return result;
}

short CTX4OLE::GetTableRows(short TableId)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x76, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		TableId);
	return result;
}

CString CTX4OLE::GetTableCellText(short TableId, short Row, short Column)
{
	CString result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x77, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, parms,
		TableId, Row, Column);
	return result;
}

void CTX4OLE::SetTableCellText(short TableId, short Row, short Column, LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_BSTR;
	InvokeHelper(0x77, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 TableId, Row, Column, lpszNewValue);
}

short CTX4OLE::GetFieldEditAttr(short FieldId)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7c, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		FieldId);
	return result;
}

void CTX4OLE::SetFieldEditAttr(short FieldId, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7c, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 FieldId, nNewValue);
}

short CTX4OLE::FieldNext(short FieldId, short FieldGroup)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x7d, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		FieldId, FieldGroup);
	return result;
}

VARIANT CTX4OLE::GetFieldData(short FieldId)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x7e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		FieldId);
	return result;
}

void CTX4OLE::SetFieldData(short FieldId, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x7e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 FieldId, &newValue);
}

BOOL CTX4OLE::LoadFromMemory(const VARIANT& DataBuffer, const VARIANT& Format, const VARIANT& CurSelection)
{
	BOOL result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x7f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		&DataBuffer, &Format, &CurSelection);
	return result;
}

VARIANT CTX4OLE::SaveToMemory(const VARIANT& Format, const VARIANT& CurSelection)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x80, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&Format, &CurSelection);
	return result;
}

VARIANT CTX4OLE::GetTableCellAttribute(short TableId, short Row, short Column, long Attribute)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4;
	InvokeHelper(0x81, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		TableId, Row, Column, Attribute);
	return result;
}

void CTX4OLE::SetTableCellAttribute(short TableId, short Row, short Column, long Attribute, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2 VTS_I4 VTS_VARIANT;
	InvokeHelper(0x81, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 TableId, Row, Column, Attribute, &newValue);
}

long CTX4OLE::Find(LPCTSTR FindWhat, const VARIANT& Start, const VARIANT& Options)
{
	long result;
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x82, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		FindWhat, &Start, &Options);
	return result;
}

short CTX4OLE::TableNext(short EnumerationNumber, short* TableId)
{
	short result;
	static BYTE parms[] =
		VTS_I2 VTS_PI2;
	InvokeHelper(0x83, DISPATCH_METHOD, VT_I2, (void*)&result, parms,
		EnumerationNumber, TableId);
	return result;
}

long CTX4OLE::GetTableCellStart(short TableId, short Row, short Column)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x84, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		TableId, Row, Column);
	return result;
}

long CTX4OLE::GetTableCellLength(short TableId, short Row, short Column)
{
	long result;
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x85, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		TableId, Row, Column);
	return result;
}

BOOL CTX4OLE::HeaderFooterActivate(long HeaderFooter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x89, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		HeaderFooter);
	return result;
}

BOOL CTX4OLE::HeaderFooterSelect(long HeaderFooter)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		HeaderFooter);
	return result;
}

long CTX4OLE::GetHeaderFooterPosition(long HeaderFooter)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x8d, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		HeaderFooter);
	return result;
}

void CTX4OLE::SetHeaderFooterPosition(long HeaderFooter, long nNewValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x8d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 HeaderFooter, nNewValue);
}

VARIANT CTX4OLE::GetFieldTypeData(short FieldId)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x8e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		FieldId);
	return result;
}

void CTX4OLE::SetFieldTypeData(short FieldId, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x8e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 FieldId, &newValue);
}

BOOL CTX4OLE::FieldGoto(long FieldType, const VARIANT& FieldIdOrName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x8f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		FieldType, &FieldIdOrName);
	return result;
}

long CTX4OLE::GetFieldType(short FieldId)
{
	long result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x90, DISPATCH_PROPERTYGET, VT_I4, (void*)&result, parms,
		FieldId);
	return result;
}

void CTX4OLE::SetFieldType(short FieldId, long nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I4;
	InvokeHelper(0x90, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 FieldId, nNewValue);
}

BOOL CTX4OLE::ResetContents()
{
	BOOL result;
	InvokeHelper(0x93, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

long CTX4OLE::InputPosFromPoint(long X, long Y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0x94, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		X, Y);
	return result;
}

void CTX4OLE::PrintDoc(LPCTSTR DocName, short FromPage, short ToPage, short Copies)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I2 VTS_I2 VTS_I2;
	InvokeHelper(0x95, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 DocName, FromPage, ToPage, Copies);
}

VARIANT CTX4OLE::GetBulletAttribute(long Attribute)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x99, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Attribute);
	return result;
}

void CTX4OLE::SetBulletAttribute(long Attribute, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x99, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Attribute, &newValue);
}

VARIANT CTX4OLE::GetNumberingAttribute(long Attribute)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0x9a, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Attribute);
	return result;
}

void CTX4OLE::SetNumberingAttribute(long Attribute, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I4 VTS_VARIANT;
	InvokeHelper(0x9a, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Attribute, &newValue);
}

BOOL CTX4OLE::ListAttrDialog()
{
	BOOL result;
	InvokeHelper(0x9c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

VARIANT CTX4OLE::SaveToMemoryBuffer(const VARIANT& DataBuffer, const VARIANT& Format, const VARIANT& CurSelection)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x9d, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&DataBuffer, &Format, &CurSelection);
	return result;
}

BOOL CTX4OLE::TableDeleteColumn()
{
	BOOL result;
	InvokeHelper(0x9e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTX4OLE::TableInsertLines(long Position, short Lines)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4 VTS_I2;
	InvokeHelper(0x9f, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Position, Lines);
	return result;
}

BOOL CTX4OLE::TableInsertColumn(long Position)
{
	BOOL result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		Position);
	return result;
}

long CTX4OLE::GetBaseLinePos(long Line)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa4, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Line);
	return result;
}

long CTX4OLE::GetCharFromLine(long Line)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa5, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Line);
	return result;
}

long CTX4OLE::GetLineCount()
{
	long result;
	InvokeHelper(0xa6, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
	return result;
}

long CTX4OLE::GetLineFromChar(long Char)
{
	long result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa7, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		Char);
	return result;
}

long CTX4OLE::GetLineFromPoint(long X, long Y)
{
	long result;
	static BYTE parms[] =
		VTS_I4 VTS_I4;
	InvokeHelper(0xa8, DISPATCH_METHOD, VT_I4, (void*)&result, parms,
		X, Y);
	return result;
}

VARIANT CTX4OLE::GetLineRect(long Line)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I4;
	InvokeHelper(0xa9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		Line);
	return result;
}

VARIANT CTX4OLE::GetTextExtent()
{
	VARIANT result;
	InvokeHelper(0xaa, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
	return result;
}

short CTX4OLE::GetCaretWidth(short Caret)
{
	short result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xab, DISPATCH_PROPERTYGET, VT_I2, (void*)&result, parms,
		Caret);
	return result;
}

void CTX4OLE::SetCaretWidth(short Caret, short nNewValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xab, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Caret, nNewValue);
}

BOOL CTX4OLE::TabDialog()
{
	BOOL result;
	InvokeHelper(0xad, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

BOOL CTX4OLE::StyleDialog()
{
	BOOL result;
	InvokeHelper(0xae, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
	return result;
}

LPDISPATCH CTX4OLE::XMLElements(LPCTSTR ElementName)
{
	LPDISPATCH result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0xb1, DISPATCH_METHOD, VT_DISPATCH, (void*)&result, parms,
		ElementName);
	return result;
}

void CTX4OLE::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
