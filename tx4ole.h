#if !defined(AFX_TX4OLE_H__13CF23C4_96DD_11D7_AB07_000795C926F4__INCLUDED_)
#define AFX_TX4OLE_H__13CF23C4_96DD_11D7_AB07_000795C926F4__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CTX4OLE wrapper class

class CTX4OLE : public CWnd
{
protected:
	DECLARE_DYNCREATE(CTX4OLE)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x3d6d5d2f, 0xb9f2, 0x101c, { 0xae, 0xd5, 0x0, 0x60, 0x8c, 0xf5, 0x25, 0xa5 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	BOOL GetEnabled();
	void SetEnabled(BOOL);
	OLE_COLOR GetBackColor();
	void SetBackColor(OLE_COLOR);
	OLE_COLOR GetForeColor();
	void SetForeColor(OLE_COLOR);
	OLE_HANDLE GetHWnd();
	void SetHWnd(OLE_HANDLE);
	BOOL GetTabKey();
	void SetTabKey(BOOL);
	BOOL GetFormatSelection();
	void SetFormatSelection(BOOL);
	CString GetVTSpellDictionary();
	void SetVTSpellDictionary(LPCTSTR);
	short GetBorderStyle();
	void SetBorderStyle(short);
	short GetBackStyle();
	void SetBackStyle(short);
	short GetFontBold();
	void SetFontBold(short);
	short GetFontItalic();
	void SetFontItalic(short);
	CString GetFontName();
	void SetFontName(LPCTSTR);
	short GetFontSize();
	void SetFontSize(short);
	short GetFontStrikethru();
	void SetFontStrikethru(short);
	short GetFontUnderline();
	void SetFontUnderline(short);
	long GetPageWidth();
	void SetPageWidth(long);
	long GetPageHeight();
	void SetPageHeight(long);
	short GetScrollBars();
	void SetScrollBars(short);
	CString GetText();
	void SetText(LPCTSTR);
	short GetAlignment();
	void SetAlignment(short);
	short GetFrameDistance();
	void SetFrameDistance(short);
	short GetFrameLineWidth();
	void SetFrameLineWidth(short);
	short GetFrameStyle();
	void SetFrameStyle(short);
	long GetScrollPosX();
	void SetScrollPosX(long);
	long GetScrollPosY();
	void SetScrollPosY(long);
	long GetPageMarginL();
	void SetPageMarginL(long);
	long GetPageMarginT();
	void SetPageMarginT(long);
	long GetPageMarginR();
	void SetPageMarginR(long);
	long GetPageMarginB();
	void SetPageMarginB(long);
	long GetPrintDevice();
	void SetPrintDevice(long);
	BOOL GetControlChars();
	void SetControlChars(BOOL);
	BOOL GetHideSelection();
	void SetHideSelection(BOOL);
	BOOL GetInsertionMode();
	void SetInsertionMode(BOOL);
	long GetSelLength();
	void SetSelLength(long);
	long GetSelStart();
	void SetSelStart(long);
	CString GetSelText();
	void SetSelText(LPCTSTR);
	BOOL GetClipChildren();
	void SetClipChildren(BOOL);
	BOOL GetClipSiblings();
	void SetClipSiblings(BOOL);
	short GetSizeMode();
	void SetSizeMode(short);
	short GetLanguage();
	void SetLanguage(short);
	short GetViewMode();
	void SetViewMode(short);
	BOOL GetPrintOffset();
	void SetPrintOffset(BOOL);
	short GetZoomFactor();
	void SetZoomFactor(short);
	short GetFieldCurrent();
	void SetFieldCurrent(short);
	BOOL GetFieldChangeable();
	void SetFieldChangeable(BOOL);
	BOOL GetFieldDeleteable();
	void SetFieldDeleteable(BOOL);
	CString GetFieldText();
	void SetFieldText(LPCTSTR);
	short GetTabCurrent();
	void SetTabCurrent(short);
	short GetTabType();
	void SetTabType(short);
	long GetTabPos();
	void SetTabPos(long);
	short GetBaseLine();
	void SetBaseLine(short);
	short GetLineSpacing();
	void SetLineSpacing(short);
	short GetPrintZoom();
	void SetPrintZoom(short);
	CString GetRTFSelText();
	void SetRTFSelText(LPCTSTR);
	CString GetImageFilters();
	void SetImageFilters(LPCTSTR);
	CString GetImageFilename();
	void SetImageFilename(LPCTSTR);
	short GetLineSpacingT();
	void SetLineSpacingT(short);
	short GetObjectCurrent();
	void SetObjectCurrent(short);
	long GetStatusBarHandle();
	void SetStatusBarHandle(long);
	long GetRulerHandle();
	void SetRulerHandle(long);
	long GetButtonBarHandle();
	void SetButtonBarHandle(long);
	short GetObjectScaleX();
	void SetObjectScaleX(short);
	short GetObjectScaleY();
	void SetObjectScaleY(short);
	short GetObjectTextflow();
	void SetObjectTextflow(short);
	short GetObjectSizeMode();
	void SetObjectSizeMode(short);
	short GetImageSaveMode();
	void SetImageSaveMode(short);
	short GetImageDisplayMode();
	void SetImageDisplayMode(short);
	BOOL GetPrintColors();
	void SetPrintColors(BOOL);
	short GetEditMode();
	void SetEditMode(short);
	short GetMousePointer();
	void SetMousePointer(short);
	long GetNextWindow();
	void SetNextWindow(long);
	short GetCanUndo();
	void SetCanUndo(short);
	short GetCanRedo();
	void SetCanRedo(short);
	long GetCurrentPages();
	void SetCurrentPages(long);
	long GetFieldPosX();
	void SetFieldPosX(long);
	long GetFieldPosY();
	void SetFieldPosY(long);
	long GetFieldStart();
	void SetFieldStart(long);
	long GetFieldEnd();
	void SetFieldEnd(long);
	short GetIndentL();
	void SetIndentL(short);
	short GetIndentR();
	void SetIndentR(short);
	short GetIndentFL();
	void SetIndentFL(short);
	short GetIndentT();
	void SetIndentT(short);
	short GetIndentB();
	void SetIndentB(short);
	unsigned long GetTextBkColor();
	void SetTextBkColor(unsigned long);
	short GetDataFormat();
	void SetDataFormat(short);
	CString GetDataText();
	void SetDataText(LPCTSTR);
	short GetViewSection();
	void SetViewSection(short);
	CString GetViewImagePath();
	void SetViewImagePath(LPCTSTR);
	BOOL GetAutoExpand();
	void SetAutoExpand(BOOL);
	BOOL GetTableCanInsert();
	void SetTableCanInsert(BOOL);
	BOOL GetTableCanDeleteLines();
	void SetTableCanDeleteLines(BOOL);
	BOOL GetEnableHyperlinks();
	void SetEnableHyperlinks(BOOL);
	BOOL GetTableGridLines();
	void SetTableGridLines(BOOL);
	BOOL GetTableCanChangeAttr();
	void SetTableCanChangeAttr(BOOL);
	short GetTableAtInputPos();
	void SetTableAtInputPos(short);
	short GetTableColAtInputPos();
	void SetTableColAtInputPos(short);
	short GetTableRowAtInputPos();
	void SetTableRowAtInputPos(short);
	short GetFontUnderlineStyle();
	void SetFontUnderlineStyle(short);
	short GetDataTextFormat();
	void SetDataTextFormat(short);
	CString GetResourceFile();
	void SetResourceFile(LPCTSTR);
	VARIANT GetCurrentInputPosition();
	void SetCurrentInputPosition(const VARIANT&);
	long GetHeaderFooterStyle();
	void SetHeaderFooterStyle(long);
	long GetHeaderFooter();
	void SetHeaderFooter(long);
	short GetFieldAtInputPos();
	void SetFieldAtInputPos(short);
	LPDISPATCH GetObjectItem();
	void SetObjectItem(LPDISPATCH);
	BOOL GetLockWindowUpdate();
	void SetLockWindowUpdate(BOOL);
	BOOL GetCanCopy();
	void SetCanCopy(BOOL);
	BOOL GetCanPaste();
	void SetCanPaste(BOOL);
	long GetListType();
	void SetListType(long);
	BOOL GetTableCanDeleteColumn();
	void SetTableCanDeleteColumn(BOOL);
	BOOL GetTableCanInsertColumn();
	void SetTableCanInsertColumn(BOOL);
	BOOL GetTableCanInsertLines();
	void SetTableCanInsertLines(BOOL);
	VARIANT GetDevice();
	void SetDevice(const VARIANT&);
	CString GetStyleCurrent();
	void SetStyleCurrent(LPCTSTR);
	short GetWordWrapMode();
	void SetWordWrapMode(short);
	LPDISPATCH GetStyles();
	void SetStyles(LPDISPATCH);
	short GetXMLEditMode();
	void SetXMLEditMode(short);
	CString GetImageExportFilters();
	void SetImageExportFilters(LPCTSTR);
	short GetImageExportFormat();
	void SetImageExportFormat(short);
	CString GetImageExportFilename();
	void SetImageExportFilename(LPCTSTR);

// Operations
public:
	void Refresh();
	void PrintPage(short PageNumber);
	BOOL ParagraphDialog();
	BOOL FontDialog();
	void FindReplace(short TypeOfDialog);
	BOOL Undo();
	BOOL Redo();
	BOOL VTSpellCheck();
	void Clip(short Action);
	BOOL RTFImport(LPCTSTR FileName, const VARIANT& Extended);
	BOOL RTFExport(LPCTSTR FileName);
	BOOL TextImport(LPCTSTR FileName);
	BOOL TextExport(LPCTSTR FileName);
	BOOL FieldInsert(LPCTSTR FieldText);
	BOOL FieldDelete(BOOL DeleteTotal);
	short ObjectInsertAsChar(long hWnd, LPCTSTR FileName, long TextPos, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, const VARIANT& KindOfObject);
	short ObjectInsertFixed(long hWnd, LPCTSTR FileName, long PosX, long PosY, short ScaleX, short ScaleY, short ImageDisplayMode, short ImageSaveMode, short SizeMode, short Textflow, short DistanceL, short DistanceT, short DistanceR, 
		short DistanceB, const VARIANT& KindOfObject);
	long Load(LPCTSTR FileName, const VARIANT& Offset, const VARIANT& Format, const VARIANT& CurSelection);
	long Save(LPCTSTR FileName, const VARIANT& Offset, const VARIANT& Format, const VARIANT& CurSelection);
	BOOL ObjectDelete(short ObjectId);
	short ObjectNext(short ObjectId, short ObjectGroup);
	short GetObjectDistance(short index);
	void SetObjectDistance(short index, short nNewValue);
	BOOL ViewNextHighlight();
	short TableInsert(short Rows, short Columns, long TextPos, const VARIANT& TableId);
	BOOL TableDeleteLines();
	VARIANT GetLoadSaveAttribute(long Attribute);
	void SetLoadSaveAttribute(long Attribute, const VARIANT& newValue);
	BOOL TableAttrDialog();
	short GetTableColumns(short TableId);
	short GetTableRows(short TableId);
	CString GetTableCellText(short TableId, short Row, short Column);
	void SetTableCellText(short TableId, short Row, short Column, LPCTSTR lpszNewValue);
	short GetFieldEditAttr(short FieldId);
	void SetFieldEditAttr(short FieldId, short nNewValue);
	short FieldNext(short FieldId, short FieldGroup);
	VARIANT GetFieldData(short FieldId);
	void SetFieldData(short FieldId, const VARIANT& newValue);
	BOOL LoadFromMemory(const VARIANT& DataBuffer, const VARIANT& Format, const VARIANT& CurSelection);
	VARIANT SaveToMemory(const VARIANT& Format, const VARIANT& CurSelection);
	VARIANT GetTableCellAttribute(short TableId, short Row, short Column, long Attribute);
	void SetTableCellAttribute(short TableId, short Row, short Column, long Attribute, const VARIANT& newValue);
	long Find(LPCTSTR FindWhat, const VARIANT& Start, const VARIANT& Options);
	short TableNext(short EnumerationNumber, short* TableId);
	long GetTableCellStart(short TableId, short Row, short Column);
	long GetTableCellLength(short TableId, short Row, short Column);
	BOOL HeaderFooterActivate(long HeaderFooter);
	BOOL HeaderFooterSelect(long HeaderFooter);
	long GetHeaderFooterPosition(long HeaderFooter);
	void SetHeaderFooterPosition(long HeaderFooter, long nNewValue);
	VARIANT GetFieldTypeData(short FieldId);
	void SetFieldTypeData(short FieldId, const VARIANT& newValue);
	BOOL FieldGoto(long FieldType, const VARIANT& FieldIdOrName);
	long GetFieldType(short FieldId);
	void SetFieldType(short FieldId, long nNewValue);
	BOOL ResetContents();
	long InputPosFromPoint(long X, long Y);
	void PrintDoc(LPCTSTR DocName, short FromPage, short ToPage, short Copies);
	VARIANT GetBulletAttribute(long Attribute);
	void SetBulletAttribute(long Attribute, const VARIANT& newValue);
	VARIANT GetNumberingAttribute(long Attribute);
	void SetNumberingAttribute(long Attribute, const VARIANT& newValue);
	BOOL ListAttrDialog();
	VARIANT SaveToMemoryBuffer(const VARIANT& DataBuffer, const VARIANT& Format, const VARIANT& CurSelection);
	BOOL TableDeleteColumn();
	BOOL TableInsertLines(long Position, short Lines);
	BOOL TableInsertColumn(long Position);
	long GetBaseLinePos(long Line);
	long GetCharFromLine(long Line);
	long GetLineCount();
	long GetLineFromChar(long Char);
	long GetLineFromPoint(long X, long Y);
	VARIANT GetLineRect(long Line);
	VARIANT GetTextExtent();
	short GetCaretWidth(short Caret);
	void SetCaretWidth(short Caret, short nNewValue);
	BOOL TabDialog();
	BOOL StyleDialog();
	LPDISPATCH XMLElements(LPCTSTR ElementName);
	void AboutBox();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_TX4OLE_H__13CF23C4_96DD_11D7_AB07_000795C926F4__INCLUDED_)
